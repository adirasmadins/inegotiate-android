package com.google.gdata.client;

import com.google.gdata.util.ErrorDomain;
import com.google.gdata.util.ErrorDomain.ErrorCode;

public class CoreErrorDomain extends ErrorDomain {
    public static final CoreErrorDomain ERR;
    public final ErrorCode accountDeleted;
    public final ErrorCode accountDisabled;
    public final ErrorCode accountUnverified;
    public final ErrorCode atomFormatRequired;
    public final ErrorCode batchingNotSupported;
    public final ErrorCode cannotEditResource;
    public final ErrorCode cantAccessFeedData;
    public final ErrorCode cantCreateContentGenerator;
    public final ErrorCode cantCreateEntry;
    public final ErrorCode cantCreateExtension;
    public final ErrorCode cantCreateFeed;
    public final ErrorCode cantCreateProvider;
    public final ErrorCode cantDecodeCategoryQuery;
    public final ErrorCode cantEncodeQueryParams;
    public final ErrorCode cantExtractJsonValue;
    public final ErrorCode cantLoadAuthProviderClass;
    public final ErrorCode cantLoadEntryClass;
    public final ErrorCode cantLoadExtensionClass;
    public final ErrorCode cantLoadExtensionPoint;
    public final ErrorCode cantLoadFeedClass;
    public final ErrorCode cantLoadFeedProviderClass;
    public final ErrorCode cantLoadGeneratorClass;
    public final ErrorCode cantLoadKindAdaptor;
    public final ErrorCode cantLoadServiceClass;
    public final ErrorCode cantWriteMimeMultipart;
    public final ErrorCode clientNotWhitelisted;
    public final ErrorCode collectionTitleRequired;
    public final ErrorCode commentsFeedLinkRequired;
    public final ErrorCode deleteNotSupported;
    public final ErrorCode duplicateAlt;
    public final ErrorCode duplicateAttribute;
    public final ErrorCode duplicateAttributeValue;
    public final ErrorCode duplicateContent;
    public final ErrorCode duplicateDraft;
    public final ErrorCode duplicateEmail;
    public final ErrorCode duplicateEntryId;
    public final ErrorCode duplicateExtension;
    public final ErrorCode duplicateFeedId;
    public final ErrorCode duplicateGenerator;
    public final ErrorCode duplicateIcon;
    public final ErrorCode duplicateItemsPerPage;
    public final ErrorCode duplicateLogo;
    public final ErrorCode duplicateName;
    public final ErrorCode duplicatePathPrefix;
    public final ErrorCode duplicateRights;
    public final ErrorCode duplicateStartIndex;
    public final ErrorCode duplicateSubtitle;
    public final ErrorCode duplicateSummary;
    public final ErrorCode duplicateTextNodeValue;
    public final ErrorCode duplicateTitle;
    public final ErrorCode duplicateTotalResults;
    public final ErrorCode duplicateUri;
    public final ErrorCode duplicateUrlBase;
    public final ErrorCode duplicateValue;
    public final ErrorCode elementNotRepeatable;
    public final ErrorCode elementNotSimple;
    public final ErrorCode emailValueRequired;
    public final ErrorCode entityTagMatches;
    public final ErrorCode entryNotAssociated;
    public final ErrorCode etagsMismatch;
    public final ErrorCode etagsUnsupported;
    public final ErrorCode feedNotAssociated;
    public final ErrorCode geoPtLatRequired;
    public final ErrorCode geoPtLonRequired;
    public final ErrorCode headerRequired;
    public final ErrorCode iconValueRequired;
    public final ErrorCode idRequired;
    public final ErrorCode idValueRequired;
    public final ErrorCode illegalInputFormat;
    public final ErrorCode imsNotSupported;
    public final ErrorCode incompatiblePaginationParameters;
    public final ErrorCode incorrectDataVersion;
    public final ErrorCode insertNotSupported;
    public final ErrorCode insufficientSecurityLevel;
    public final ErrorCode invalidAltValue;
    public final ErrorCode invalidArbitraryXml;
    public final ErrorCode invalidAttributeValue;
    public final ErrorCode invalidAverageRatingAttribute;
    public final ErrorCode invalidBase64;
    public final ErrorCode invalidBatchOperationType;
    public final ErrorCode invalidBigDecimalAttribute;
    public final ErrorCode invalidBigIntegerAttribute;
    public final ErrorCode invalidBooleanAttribute;
    public final ErrorCode invalidByteAttribute;
    public final ErrorCode invalidCacheControlOption;
    public final ErrorCode invalidCategoryFilter;
    public final ErrorCode invalidChildElement;
    public final ErrorCode invalidContentType;
    public final ErrorCode invalidCountHintAttribute;
    public final ErrorCode invalidDatetime;
    public final ErrorCode invalidDoubleAttribute;
    public final ErrorCode invalidDraft;
    public final ErrorCode invalidEndValue;
    public final ErrorCode invalidEnumValue;
    public final ErrorCode invalidErrorFormat;
    public final ErrorCode invalidExtension;
    public final ErrorCode invalidFieldSelection;
    public final ErrorCode invalidFixedAttribute;
    public final ErrorCode invalidFloatAttribute;
    public final ErrorCode invalidGeoPtElev;
    public final ErrorCode invalidGeoPtLat;
    public final ErrorCode invalidGeoPtLon;
    public final ErrorCode invalidGeoPtTime;
    public final ErrorCode invalidIntegerAttribute;
    public final ErrorCode invalidJson;
    public final ErrorCode invalidLongAttribute;
    public final ErrorCode invalidMediaSourceUri;
    public final ErrorCode invalidMediaType;
    public final ErrorCode invalidMethodOverrideHeader;
    public final ErrorCode invalidMimeType;
    public final ErrorCode invalidMixedContent;
    public final ErrorCode invalidParameterValue;
    public final ErrorCode invalidPatchTarget;
    public final ErrorCode invalidRedirectedToUrl;
    public final ErrorCode invalidReminderAbsoluteTime;
    public final ErrorCode invalidReminderDays;
    public final ErrorCode invalidReminderHours;
    public final ErrorCode invalidReminderMethod;
    public final ErrorCode invalidReminderMinutes;
    public final ErrorCode invalidRequestUri;
    public final ErrorCode invalidRequestVersion;
    public final ErrorCode invalidResourceVersion;
    public final ErrorCode invalidSecurityProtocol;
    public final ErrorCode invalidServiceClass;
    public final ErrorCode invalidShortAttribute;
    public final ErrorCode invalidStartValue;
    public final ErrorCode invalidTextContent;
    public final ErrorCode invalidTextContentType;
    public final ErrorCode invalidTimeOffset;
    public final ErrorCode invalidToDoDueTime;
    public final ErrorCode invalidToDoHours;
    public final ErrorCode invalidUri;
    public final ErrorCode invalidUriTemplate;
    public final ErrorCode invalidUrl;
    public final ErrorCode invalidValueRatingAttribute;
    public final ErrorCode invalidVersion;
    public final ErrorCode itemsPerPageNotInteger;
    public final ErrorCode lengthNotInteger;
    public final ErrorCode logoValueRequired;
    public final ErrorCode matchHeaderRequired;
    public final ErrorCode minGreaterThanMax;
    public final ErrorCode missingAddressAttribute;
    public final ErrorCode missingAltAttribute;
    public final ErrorCode missingAttribute;
    public final ErrorCode missingContact;
    public final ErrorCode missingContentType;
    public final ErrorCode missingContentTypeAttribute;
    public final ErrorCode missingConverter;
    public final ErrorCode missingDescription;
    public final ErrorCode missingEntry;
    public final ErrorCode missingExtensionClass;
    public final ErrorCode missingExtensionElement;
    public final ErrorCode missingFeed;
    public final ErrorCode missingFeedProvider;
    public final ErrorCode missingFeedProviderClass;
    public final ErrorCode missingFeedProviderDescription;
    public final ErrorCode missingFormat;
    public final ErrorCode missingGeneratorClass;
    public final ErrorCode missingHrefAttribute;
    public final ErrorCode missingLocalName;
    public final ErrorCode missingNameAttribute;
    public final ErrorCode missingNamespace;
    public final ErrorCode missingNamespaceDescription;
    public final ErrorCode missingPathPrefix;
    public final ErrorCode missingPatternAttribute;
    public final ErrorCode missingProviderConstructor;
    public final ErrorCode missingRequiredContent;
    public final ErrorCode missingResourceVersion;
    public final ErrorCode missingServiceClass;
    public final ErrorCode missingShortName;
    public final ErrorCode missingSrcAttribute;
    public final ErrorCode missingTags;
    public final ErrorCode missingTermAttribute;
    public final ErrorCode missingTextContent;
    public final ErrorCode missingUriTemplate;
    public final ErrorCode missingVersion;
    public final ErrorCode mustBeBoolean;
    public final ErrorCode mustExtendBaseEntry;
    public final ErrorCode mustExtendBaseFeed;
    public final ErrorCode mustExtendExtensionPoint;
    public final ErrorCode mustImplementExtension;
    public final ErrorCode nameRequired;
    public final ErrorCode nameValueRequired;
    public final ErrorCode noAcceptableLanguage;
    public final ErrorCode noAcceptableType;
    public final ErrorCode noAvailableServers;
    public final ErrorCode noPostConcurrency;
    public final ErrorCode notModifiedSinceTimestamp;
    public final ErrorCode nullJsonValue;
    public final ErrorCode optimisticConcurrencyNotSupported;
    public final ErrorCode optionsNotSupported;
    public final ErrorCode partialJsoncUnsupported;
    public final ErrorCode pathPrefixValueRequired;
    public final ErrorCode predicatesNotAllowed;
    public final ErrorCode quotaExceeded;
    public final ErrorCode rateLimitExceeded;
    public final ErrorCode responseMissingContentType;
    public final ErrorCode responseMissingEntry;
    public final ErrorCode responseMissingFeed;
    public final ErrorCode rpcUnsupported;
    public final ErrorCode serverOverloaded;
    public final ErrorCode startIndexNotInteger;
    public final ErrorCode targetFeedReadOnly;
    public final ErrorCode textNotAllowed;
    public final ErrorCode timestampAndEntityTagMatch;
    public final ErrorCode toDoCompletedRequired;
    public final ErrorCode tooManyAttributes;
    public final ErrorCode totalResultsNotInteger;
    public final ErrorCode traceNotSupported;
    public final ErrorCode unknownMdbService;
    public final ErrorCode unparsableS2SHeader;
    public final ErrorCode unrecognizedElement;
    public final ErrorCode unrecognizedKey;
    public final ErrorCode unrecognizedParserEvent;
    public final ErrorCode unsupportedContentType;
    public final ErrorCode unsupportedEncoding;
    public final ErrorCode unsupportedFieldsParam;
    public final ErrorCode unsupportedHeader;
    public final ErrorCode unsupportedHeaderIfModifiedSince;
    public final ErrorCode unsupportedHeaderIfNoneMatch;
    public final ErrorCode unsupportedNullJson;
    public final ErrorCode unsupportedOutputFormat;
    public final ErrorCode unsupportedQueryParam;
    public final ErrorCode unsupportedQueryRequestType;
    public final ErrorCode unsupportedQueryType;
    public final ErrorCode unsupportedTextType;
    public final ErrorCode updateNotSupported;
    public final ErrorCode updateRequiresFullRepresentation;
    public final ErrorCode uploadTooLarge;
    public final ErrorCode uriValueRequired;
    public final ErrorCode urlBaseValueRequired;
    public final ErrorCode valueOrAverageRequired;
    public final ErrorCode valueOrXmlRequired;
    public final ErrorCode valueXmlMutuallyExclusive;
    public final ErrorCode versionNotSupported;
    public final ErrorCode whenRequired;
    public final ErrorCode whitelistAccessFailed;
    public final ErrorCode workspaceRequired;
    public final ErrorCode workspaceTitleRequired;

    private CoreErrorDomain() {
        super("GData");
        this.versionNotSupported = new ErrorCode(this, "versionNotSupported").withInternalReason("Version is not supported");
        this.accountDeleted = new ErrorCode(this, "accountDeleted").withInternalReason("Account deleted");
        this.accountDisabled = new ErrorCode(this, "accountDisabled").withInternalReason("Account disabled");
        this.accountUnverified = new ErrorCode(this, "accountUnverified").withInternalReason("Account unverified");
        this.atomFormatRequired = new ErrorCode(this, "atomFormatRequired").withInternalReason("Batch requires Atom format");
        this.batchingNotSupported = new ErrorCode(this, "batchingNotSupported").withInternalReason("Batching not supported by feed");
        this.cantAccessFeedData = new ErrorCode(this, "cantAccessFeedData").withInternalReason("Unable to access feed data");
        this.cantCreateContentGenerator = new ErrorCode(this, "cantCreateContentGenerator").withInternalReason("Unable to create ContentGenerator instance");
        this.cantCreateEntry = new ErrorCode(this, "cantCreateEntry").withInternalReason("Unable to create entry");
        this.cantCreateExtension = new ErrorCode(this, "cantCreateExtension").withInternalReason("Unable to create extension");
        this.cantCreateFeed = new ErrorCode(this, "cantCreateFeed").withInternalReason("Unable to create feed");
        this.cantCreateProvider = new ErrorCode(this, "cantCreateProvider").withInternalReason("Unable to instantiate provider");
        this.cantDecodeCategoryQuery = new ErrorCode(this, "cantDecodeCategoryQuery").withInternalReason("Unable to decode category query");
        this.cannotEditResource = new ErrorCode(this, "cannotEditResource").withInternalReason("Target resource cannot be edited by client");
        this.cantEncodeQueryParams = new ErrorCode(this, "cantEncodeQueryParams").withInternalReason("Unable to encode query parameters");
        this.cantExtractJsonValue = new ErrorCode(this, "cantExtractJsonValue").withInternalReason("Cannot extract JSON value");
        this.cantLoadAuthProviderClass = new ErrorCode(this, "cantLoadAuthProviderClass").withInternalReason("authProvider class cannot be loaded");
        this.cantLoadEntryClass = new ErrorCode(this, "cantLoadEntryClass").withInternalReason("entry class cannot be loaded");
        this.cantLoadExtensionClass = new ErrorCode(this, "cantLoadExtensionClass").withInternalReason("Extension classes must implement the Extension interface");
        this.cantLoadExtensionPoint = new ErrorCode(this, "cantLoadExtensionPoint").withInternalReason("Unable to load ExtensionPoint class");
        this.cantLoadFeedClass = new ErrorCode(this, "cantLoadFeedClass").withInternalReason("feed class cannot be loaded");
        this.cantLoadFeedProviderClass = new ErrorCode(this, "cantLoadFeedProviderClass").withInternalReason("feedProvider class cannot be loaded");
        this.cantLoadGeneratorClass = new ErrorCode(this, "cantLoadGeneratorClass").withInternalReason("Unable to load ContentGenerator class");
        this.cantLoadKindAdaptor = new ErrorCode(this, "cantLoadKindAdaptor").withInternalReason("Unable to load kind adaptor");
        this.cantLoadServiceClass = new ErrorCode(this, "cantLoadServiceClass").withInternalReason("Unable to load serviceClass class");
        this.cantWriteMimeMultipart = new ErrorCode(this, "cantWriteMimeMultipart").withInternalReason("Unable to write MIME multipart message");
        this.clientNotWhitelisted = new ErrorCode(this, "clientNotWhitelisted").withInternalReason("Client not whitelisted for ONLINE access");
        this.collectionTitleRequired = new ErrorCode(this, "collectionTitleRequired").withInternalReason("Collection must contain a title");
        this.commentsFeedLinkRequired = new ErrorCode(this, "commentsFeedLinkRequired").withInternalReason("g:comments/g:feedLink is required");
        this.deleteNotSupported = new ErrorCode(this, "deleteNotSupported").withInternalReason("Delete not supported by feed");
        this.duplicateAlt = new ErrorCode(this, "duplicateAlt").withInternalReason("Duplicate alt mapping");
        this.duplicateAttribute = new ErrorCode(this, "duplicateAttribute").withInternalReason("Duplicate attribute");
        this.duplicateAttributeValue = new ErrorCode(this, "duplicateAttributeValue").withInternalReason("Duplicate attribute value");
        this.duplicateContent = new ErrorCode(this, "duplicateContent").withInternalReason("Duplicate content");
        this.duplicateDraft = new ErrorCode(this, "duplicateDraft").withInternalReason("Duplicate draft");
        this.duplicateEmail = new ErrorCode(this, "duplicateEmail").withInternalReason("Duplicate email");
        this.duplicateEntryId = new ErrorCode(this, "duplicateEntryId").withInternalReason("Duplicate entry ID");
        this.duplicateExtension = new ErrorCode(this, "duplicateExtension").withInternalReason("Duplicate extension element");
        this.duplicateFeedId = new ErrorCode(this, "duplicateFeedId").withInternalReason("Duplicate feed ID");
        this.duplicateGenerator = new ErrorCode(this, "duplicateGenerator").withInternalReason("Duplicate generator");
        this.duplicateIcon = new ErrorCode(this, "duplicateIcon").withInternalReason("Duplicate icon");
        this.duplicateItemsPerPage = new ErrorCode(this, "duplicateItemsPerPage").withInternalReason("Duplicate itemsPerPage");
        this.duplicateLogo = new ErrorCode(this, "duplicateLogo").withInternalReason("Duplicate logo");
        this.duplicateName = new ErrorCode(this, "duplicateName").withInternalReason("Duplicate name");
        this.duplicatePathPrefix = new ErrorCode(this, "duplicatePathPrefix").withInternalReason("Duplicate pathPrefix element");
        this.duplicateRights = new ErrorCode(this, "duplicateRights").withInternalReason("Duplicate rights");
        this.duplicateStartIndex = new ErrorCode(this, "duplicateStartIndex").withInternalReason("Duplicate startIndex");
        this.duplicateSubtitle = new ErrorCode(this, "duplicateSubtitle").withInternalReason("Duplicate subtitle");
        this.duplicateSummary = new ErrorCode(this, "duplicateSummary").withInternalReason("Duplicate summary");
        this.duplicateTextNodeValue = new ErrorCode(this, "duplicateTextNodeValue").withInternalReason("Duplicate text node value");
        this.duplicateTitle = new ErrorCode(this, "duplicateTitle").withInternalReason("Duplicate title");
        this.duplicateTotalResults = new ErrorCode(this, "duplicateTotalResults").withInternalReason("Duplicate totalResults");
        this.duplicateUri = new ErrorCode(this, "duplicateUri").withInternalReason("Duplicate URI");
        this.duplicateUrlBase = new ErrorCode(this, "duplicateUrlBase").withInternalReason("Duplicate urlBase element");
        this.duplicateValue = new ErrorCode(this, "duplicateValue").withInternalReason("Duplicate value");
        this.elementNotRepeatable = new ErrorCode(this, "elementNotRepeatable").withInternalReason("Element is not repeatable");
        this.elementNotSimple = new ErrorCode(this, "elementNotSimple").withInternalReason("Element is not simple");
        this.emailValueRequired = new ErrorCode(this, "emailValueRequired").withInternalReason("email must have a value");
        this.entityTagMatches = new ErrorCode(this, "entityTagMatches").withInternalReason("At least one entity tag matches");
        this.entryNotAssociated = new ErrorCode(this, "entryNotAssociated").withInternalReason("Entry is not associated with a GData service");
        this.etagsMismatch = new ErrorCode(this, "etagsMismatch").withInternalReason("Etags mismatch");
        this.etagsUnsupported = new ErrorCode(this, "etagsUnsupported").withInternalReason("Resource does not support Etags");
        this.feedNotAssociated = new ErrorCode(this, "feedNotAssociated").withInternalReason("Feed is not associated with a GData service");
        this.geoPtLatRequired = new ErrorCode(this, "geoPtLatRequired").withInternalReason("g:geoPt/@lat is required");
        this.geoPtLonRequired = new ErrorCode(this, "geoPtLonRequired").withInternalReason("g:geoPt/@lon is required");
        this.headerRequired = new ErrorCode(this, "headerRequired").withInternalReason("Header required");
        this.iconValueRequired = new ErrorCode(this, "iconValueRequired").withInternalReason("icon must have a value");
        this.idRequired = new ErrorCode(this, "idRequired").withInternalReason("g:originalEvent/@id is required");
        this.idValueRequired = new ErrorCode(this, "idValueRequired").withInternalReason("ID must have a value");
        this.illegalInputFormat = new ErrorCode(this, "illegalInputFormat").withInternalReason("Input format is not compatible with selected alt output format");
        this.imsNotSupported = new ErrorCode(this, "imsNotSupported").withInternalReason("If-Modified-Since HTTP precondition not supported on POST");
        this.incompatiblePaginationParameters = new ErrorCode(this, "incompatiblePaginationParameters").withInternalReason("start-token and start-index cannot both be specified at the same time");
        this.incorrectDataVersion = new ErrorCode(this, "incorrectDataVersion");
        this.insertNotSupported = new ErrorCode(this, "insertNotSupported").withInternalReason("Insert not supported by feed");
        this.insufficientSecurityLevel = new ErrorCode(this, "insufficientSecurityLevel").withInternalReason("Insufficient security level");
        this.invalidAltValue = new ErrorCode(this, "invalidAltValue").withInternalReason("Invalid alt value for entry");
        this.invalidArbitraryXml = new ErrorCode(this, "invalidArbitraryXml").withInternalReason("Invalid value for arbitrary XML");
        this.invalidAttributeValue = new ErrorCode(this, "invalidAttributeValue").withInternalReason("Invalid value for attribute");
        this.invalidAverageRatingAttribute = new ErrorCode(this, "invalidAverageRatingAttribute").withInternalReason("gd:rating/@average should lie in between gd:rating/@min and gd:rating/@max");
        this.invalidBase64 = new ErrorCode(this, "invalidBase64").withInternalReason("Expected Base-64 content");
        this.invalidBatchOperationType = new ErrorCode(this, "invalidBatchOperationType").withInternalReason("Invalid type for batch:operation");
        this.invalidBigDecimalAttribute = new ErrorCode(this, "invalidBigDecimalAttribute").withInternalReason("Invalid value for big decimal attribute");
        this.invalidBigIntegerAttribute = new ErrorCode(this, "invalidBigIntegerAttribute").withInternalReason("Invalid value for big integer attribute");
        this.invalidBooleanAttribute = new ErrorCode(this, "invalidBooleanAttribute").withInternalReason("Invalid value for boolean attribute");
        this.invalidByteAttribute = new ErrorCode(this, "invalidByteAttribute").withInternalReason("Invalid value for byte attribute");
        this.invalidCacheControlOption = new ErrorCode(this, "invalidCacheControlOption").withInternalReason("Invalid option in Cache-Control header");
        this.invalidCategoryFilter = new ErrorCode(this, "invalidCategoryFilter").withInternalReason("Invalid category filter");
        this.invalidChildElement = new ErrorCode(this, "invalidChildElement").withInternalReason("Child elements are not allowed.");
        this.invalidContentType = new ErrorCode(this, "invalidContentType").withInternalReason("Malformed Content-Type");
        this.invalidCountHintAttribute = new ErrorCode(this, "invalidCountHintAttribute").withInternalReason("Invalid gd:feedLink/@countHint");
        this.invalidDatetime = new ErrorCode(this, "invalidDatetime").withInternalReason("Badly formatted datetime");
        this.invalidDoubleAttribute = new ErrorCode(this, "invalidDoubleAttribute").withInternalReason("Invalid value for double attribute");
        this.invalidDraft = new ErrorCode(this, "invalidDraft").withInternalReason("Invalid value for draft");
        this.invalidEndValue = new ErrorCode(this, "invalidEndValue").withInternalReason("Invalid end value");
        this.invalidEnumValue = new ErrorCode(this, "invalidEnumValue").withInternalReason("Invalid enum value");
        this.invalidErrorFormat = new ErrorCode(this, "invalidErrorFormat").withInternalReason("Invalid error format");
        this.invalidExtension = new ErrorCode(this, "invalidExtension").withInternalReason("Invalid extension element");
        this.invalidFieldSelection = new ErrorCode(this, "invalidFieldSelection").withInternalReason("Invalid field selection");
        this.invalidFixedAttribute = new ErrorCode(this, "invalidFixedAttribute").withInternalReason("Invalid value for fixed attribute");
        this.invalidFloatAttribute = new ErrorCode(this, "invalidFloatAttribute").withInternalReason("Invalid value for float attribute");
        this.invalidGeoPtElev = new ErrorCode(this, "invalidGeoPtElev").withInternalReason("Invalid geoPt/@elev");
        this.invalidGeoPtLat = new ErrorCode(this, "invalidGeoPtLat").withInternalReason("Invalid geoPt/@lat");
        this.invalidGeoPtLon = new ErrorCode(this, "invalidGeoPtLon").withInternalReason("Invalid geoPt/@lon");
        this.invalidGeoPtTime = new ErrorCode(this, "invalidGeoPtTime").withInternalReason("Date/time value expected");
        this.invalidIntegerAttribute = new ErrorCode(this, "invalidIntegerAttribute").withInternalReason("Invalid value for integer attribute");
        this.invalidJson = new ErrorCode(this, "invalidJson").withInternalReason("Invalid JSON");
        this.invalidLongAttribute = new ErrorCode(this, "invalidLongAttribute").withInternalReason("Invalid value for long attribute");
        this.invalidMediaSourceUri = new ErrorCode(this, "invalidMediaSourceUri").withInternalReason("Invalid media source URI");
        this.invalidMediaType = new ErrorCode(this, "invalidMediaType").withInternalReason("Not a valid media type");
        this.invalidMethodOverrideHeader = new ErrorCode(this, "invalidMethodOverrideHeader").withInternalReason("Invalid method override header");
        this.invalidMimeType = new ErrorCode(this, "invalidMimeType").withInternalReason("Malformed MIME type");
        this.invalidMixedContent = new ErrorCode(this, "invalidMixedContent").withInternalReason("Invalid value for mixed content");
        this.invalidParameterValue = new ErrorCode(this, "invalidParameterValue").withInternalReason("Invalid parameter value");
        this.invalidRedirectedToUrl = new ErrorCode(this, "invalidRedirectedToUrl").withInternalReason("Invalid redirected-to URL");
        this.invalidPatchTarget = new ErrorCode(this, "invalidPatchTarget").withInternalReason("Target resource cannot be patched");
        this.invalidReminderAbsoluteTime = new ErrorCode(this, "invalidReminderAbsoluteTime").withInternalReason("Invalid g:reminder/@absoluteTime");
        this.invalidReminderDays = new ErrorCode(this, "invalidReminderDays").withInternalReason("Invalid g:reminder/@days");
        this.invalidReminderHours = new ErrorCode(this, "invalidReminderHours").withInternalReason("Invalid g:reminder/@hours");
        this.invalidReminderMethod = new ErrorCode(this, "invalidReminderMethod").withInternalReason("Invalid g:reminder/@method");
        this.invalidReminderMinutes = new ErrorCode(this, "invalidReminderMinutes").withInternalReason("Invalid g:reminder/@minutes");
        this.invalidRequestUri = new ErrorCode(this, "invalidRequestUri").withInternalReason("Invalid request URI");
        this.invalidRequestVersion = new ErrorCode(this, "invalidRequestVersion").withInternalReason("Invalid request version");
        this.invalidResourceVersion = new ErrorCode(this, "invalidResourceVersion").withInternalReason("Unexpected resource version ID");
        this.invalidSecurityProtocol = new ErrorCode(this, "invalidSecurityProtocol").withInternalReason("Invalid security protocol");
        this.invalidServiceClass = new ErrorCode(this, "invalidServiceClass").withInternalReason("Invalid service class attribute");
        this.invalidShortAttribute = new ErrorCode(this, "invalidShortAttribute").withInternalReason("Invalid value for short attribute");
        this.invalidStartValue = new ErrorCode(this, "invalidStartValue").withInternalReason("Invalid start value");
        this.invalidTextContent = new ErrorCode(this, "invalidTextContent").withInternalReason("Invalid text content");
        this.invalidTextContentType = new ErrorCode(this, "invalidTextContentType").withInternalReason("Invalid text content type");
        this.invalidTimeOffset = new ErrorCode(this, "invalidTimeOffset").withInternalReason("Invalid time offset");
        this.invalidToDoDueTime = new ErrorCode(this, "invalidToDoDueTime").withInternalReason("Invalid g:toDo/@dueTime");
        this.invalidToDoHours = new ErrorCode(this, "invalidToDoHours").withInternalReason("Invalid g:toDo/@hours");
        this.invalidUri = new ErrorCode(this, "invalidUri").withInternalReason("Badly formatted URI");
        this.invalidUriTemplate = new ErrorCode(this, "invalidUriTemplate").withInternalReason("Invalid uriTemplate");
        this.invalidUrl = new ErrorCode(this, "invalidUrl").withInternalReason("Badly formatted URL");
        this.invalidValueRatingAttribute = new ErrorCode(this, "invalidValueRatingAttribute").withInternalReason("gd:rating/@value should lie in between gd:rating/@min and gd:rating/@max");
        this.invalidVersion = new ErrorCode(this, "invalidVersion").withInternalReason("Invalid version");
        this.itemsPerPageNotInteger = new ErrorCode(this, "itemsPerPageNotInteger").withInternalReason("itemsPerPage is not an integer");
        this.lengthNotInteger = new ErrorCode(this, "lengthNotInteger").withInternalReason("Length must be an integer");
        this.logoValueRequired = new ErrorCode(this, "logoValueRequired").withInternalReason("logo must have a value");
        this.matchHeaderRequired = new ErrorCode(this, "matchHeaderRequired").withInternalReason("If-Match or If-None-Match header required");
        this.minGreaterThanMax = new ErrorCode(this, "minGreaterThanMax").withInternalReason("'updatedMin' must be less than or equal to 'updatedMax'");
        this.missingAddressAttribute = new ErrorCode(this, "missingAddressAttribute").withInternalReason("g:email/@address is required");
        this.missingAltAttribute = new ErrorCode(this, "missingAltAttribute").withInternalReason("Missing alt attribute");
        this.missingAttribute = new ErrorCode(this, "missingAttribute").withInternalReason("Missing attribute");
        this.missingContact = new ErrorCode(this, "missingContact").withInternalReason("missing contact");
        this.missingContentType = new ErrorCode(this, "missingContentType").withInternalReason("Response contains no content type");
        this.missingContentTypeAttribute = new ErrorCode(this, "missingContentTypeAttribute").withInternalReason("Missing content type attribute");
        this.missingConverter = new ErrorCode(this, "missingConverter").withInternalReason("No converter for type");
        this.missingDescription = new ErrorCode(this, "missingDescription").withInternalReason("missing description");
        this.missingEntry = new ErrorCode(this, "missingEntry").withInternalReason("Entry not found");
        this.missingExtensionClass = new ErrorCode(this, "missingExtensionClass").withInternalReason("Missing extensionClass attribute");
        this.missingExtensionElement = new ErrorCode(this, "missingExtensionElement").withInternalReason("Required extension element");
        this.missingFeed = new ErrorCode(this, "missingFeed").withInternalReason("Feed not found");
        this.missingFeedProvider = new ErrorCode(this, "missingFeedProvider").withInternalReason("No FeedProvider instance");
        this.missingFeedProviderClass = new ErrorCode(this, "missingFeedProviderClass").withInternalReason("Missing feedProviderClass attribute");
        this.missingFeedProviderDescription = new ErrorCode(this, "missingFeedProviderDescription").withInternalReason("At least one FeedProviderDescription must be specified");
        this.missingFormat = new ErrorCode(this, "missingFormat").withInternalReason("missing format");
        this.missingGeneratorClass = new ErrorCode(this, "missingGeneratorClass").withInternalReason("Missing generatorClass attribute");
        this.missingHrefAttribute = new ErrorCode(this, "missingHrefAttribute").withInternalReason("Link must have an 'href' attribute");
        this.missingLocalName = new ErrorCode(this, "missingLocalName").withInternalReason("Missing localName");
        this.missingNameAttribute = new ErrorCode(this, "missingNameAttribute").withInternalReason("Missing name attribute for customParam");
        this.missingNamespace = new ErrorCode(this, "missingNamespace").withInternalReason("Missing namespace");
        this.missingNamespaceDescription = new ErrorCode(this, "missingNamespaceDescription").withInternalReason("No matching NamespaceDescription");
        this.missingPathPrefix = new ErrorCode(this, "missingPathPrefix").withInternalReason("pathPrefix is missing");
        this.missingPatternAttribute = new ErrorCode(this, "missingPatternAttribute").withInternalReason("Missing pattern attribute for customParam");
        this.missingProviderConstructor = new ErrorCode(this, "missingProviderConstructor").withInternalReason("Provider constructor not found");
        this.missingRequiredContent = new ErrorCode(this, "missingRequiredContent").withInternalReason("Missing required text content");
        this.missingResourceVersion = new ErrorCode(this, "missingResourceVersion").withInternalReason("Missing resource version ID");
        this.missingServiceClass = new ErrorCode(this, "missingServiceClass").withInternalReason("Missing serviceClass attribute");
        this.missingShortName = new ErrorCode(this, "missingShortName").withInternalReason("missing shortName");
        this.missingSrcAttribute = new ErrorCode(this, "missingSrcAttribute").withInternalReason("Missing src attribute");
        this.missingTags = new ErrorCode(this, "missingTags").withInternalReason("missing tags");
        this.missingTermAttribute = new ErrorCode(this, "missingTermAttribute").withInternalReason("Category must have a 'term' attribute");
        this.missingTextContent = new ErrorCode(this, "missingTextContent").withInternalReason("Text content is required for this element.");
        this.missingUriTemplate = new ErrorCode(this, "missingUriTemplate").withInternalReason("Missing uriTemplate");
        this.missingVersion = new ErrorCode(this, "missingVersion").withInternalReason("Missing version attribute");
        this.mustBeBoolean = new ErrorCode(this, "mustBeBoolean").withInternalReason("Attribute must be boolean");
        this.mustExtendBaseEntry = new ErrorCode(this, "mustExtendBaseEntry").withInternalReason("entry class must derive from BaseEntry");
        this.mustExtendBaseFeed = new ErrorCode(this, "mustExtendBaseFeed").withInternalReason("feed class must derive from BaseFeed");
        this.mustExtendExtensionPoint = new ErrorCode(this, "mustExtendExtensionPoint").withInternalReason("Extended classes must extend ExtensionPoint");
        this.mustImplementExtension = new ErrorCode(this, "mustImplementExtension").withInternalReason("Extension classes must implement the Extension interface");
        this.nameRequired = new ErrorCode(this, "nameRequired").withInternalReason("g:extendedProperty/@name is required");
        this.nameValueRequired = new ErrorCode(this, "nameValueRequired").withInternalReason("name must have a value");
        this.noAcceptableType = new ErrorCode(this, "noAcceptableType").withInternalReason("No acceptable type available");
        this.noAcceptableLanguage = new ErrorCode(this, "noAcceptableLanguage").withInternalReason("No acceptable language available");
        this.noAvailableServers = new ErrorCode(this, "noAvailableServers").withInternalReason("Cannot find any servers");
        this.noPostConcurrency = new ErrorCode(this, "noPostConcurrency").withInternalReason("POST method does not support concurrency");
        this.notModifiedSinceTimestamp = new ErrorCode(this, "notModifiedSinceTimestamp").withInternalReason("Entity not modified since specified time");
        this.nullJsonValue = new ErrorCode(this, "nullJsonValue").withInternalReason("Null JSON values not supported");
        this.optionsNotSupported = new ErrorCode(this, "optionsNotSupported").withInternalReason("OPTIONS is not supported");
        this.optimisticConcurrencyNotSupported = new ErrorCode(this, "optimisticConcurrencyNotSupported").withInternalReason("Optimistic concurrency is no longer supported");
        this.partialJsoncUnsupported = new ErrorCode(this, "partialJsonUnsupported").withInternalReason("Partial operations are not suppported with JSONC");
        this.pathPrefixValueRequired = new ErrorCode(this, "pathPrefixValueRequired").withInternalReason("pathPrefix element must have a value");
        this.predicatesNotAllowed = new ErrorCode(this, "predicatesNotAllowed").withInternalReason("Cannot specify any predicates with requested content type");
        this.quotaExceeded = new ErrorCode(this, "quotaExceeded").withInternalReason("Insufficient storage quota");
        this.rateLimitExceeded = new ErrorCode(this, "rateLimitExceeded").withInternalReason("Rate limit exceeded, lower query rate");
        this.responseMissingContentType = new ErrorCode(this, "responseMissingContentType").withInternalReason("Response contains no content type");
        this.responseMissingEntry = new ErrorCode(this, "responseMissingEntry").withInternalReason("Response contains no entry");
        this.responseMissingFeed = new ErrorCode(this, "responseMissingFeed").withInternalReason("Response contains no feed");
        this.rpcUnsupported = new ErrorCode(this, "rpcUnsupported").withInternalReason("RPC authentication not enabled");
        this.serverOverloaded = new ErrorCode(this, "serverOverloaded").withInternalReason("Servers are overloaded");
        this.startIndexNotInteger = new ErrorCode(this, "startIndexNotInteger").withInternalReason("startIndex is not an integer");
        this.targetFeedReadOnly = new ErrorCode(this, "targetFeedReadOnly").withInternalReason("Target feed is read-only");
        this.textNotAllowed = new ErrorCode(this, "textNotAllowed").withInternalReason("This element must not have any text() data");
        this.timestampAndEntityTagMatch = new ErrorCode(this, "timestampAndEntityTagMatch").withInternalReason("Timestamp and entity tag match");
        this.toDoCompletedRequired = new ErrorCode(this, "toDoCompletedRequired").withInternalReason("g:toDo/@completed is required");
        this.tooManyAttributes = new ErrorCode(this, "tooManyAttributes").withInternalReason("g:reminder must have zero or one attribute");
        this.totalResultsNotInteger = new ErrorCode(this, "totalResultsNotInteger").withInternalReason("totalResults is not an integer");
        this.traceNotSupported = new ErrorCode(this, "traceNotSupported").withInternalReason("TRACE is not supported");
        this.unknownMdbService = new ErrorCode(this, "unknownMdbService").withInternalReason("Unknown MDB service");
        this.unparsableS2SHeader = new ErrorCode(this, "unparsableS2SHeader").withInternalReason("Error parsing S2S auth header");
        this.unrecognizedElement = new ErrorCode(this, "unrecognizedElement").withInternalReason("Unrecognized element");
        this.unrecognizedKey = new ErrorCode(this, "unrecognizedKey").withInternalReason("Unrecognized key");
        this.unrecognizedParserEvent = new ErrorCode(this, "unrecognizedParserEvent").withInternalReason("Unrecognized parser event");
        this.unsupportedContentType = new ErrorCode(this, "unsupportedContentType").withInternalReason("Unsupported content type");
        this.unsupportedEncoding = new ErrorCode(this, "unsupportedEncoding").withInternalReason("Unsupported encoding");
        this.unsupportedFieldsParam = new ErrorCode(this, "unsupportedFieldsParam").withInternalReason("Fields query parameter is not supported");
        this.unsupportedHeader = new ErrorCode(this, "unsupportedHeader").withInternalReason("Header not supported");
        this.unsupportedHeaderIfModifiedSince = new ErrorCode(this, "unsupportedHeaderIfModifiedSince").withInternalReason("If-Unmodified-Since header not supported");
        this.unsupportedHeaderIfNoneMatch = new ErrorCode(this, "unsupportedHeaderIfNoneMatch").withInternalReason("If-None-Match: * is not supported");
        this.unsupportedNullJson = new ErrorCode(this, "unsupportedNullJson").withInternalReason("Null JSON values not supported");
        this.unsupportedOutputFormat = new ErrorCode(this, "unsupportedOutputFormat").withInternalReason("Unsupported output format");
        this.unsupportedQueryParam = new ErrorCode(this, "unsupportedQueryParam").withInternalReason("Query parameter is not supported");
        this.unsupportedQueryRequestType = new ErrorCode(this, "unsupportedQueryRequestType").withInternalReason("Unsupported query request type");
        this.unsupportedQueryType = new ErrorCode(this, "unsupportedQueryType").withInternalReason("Unsupported query type");
        this.unsupportedTextType = new ErrorCode(this, "unsupportedTextType").withInternalReason("Unsupported type. Valid types are 'plain' and 'html'");
        this.updateNotSupported = new ErrorCode(this, "updateNotSupported").withInternalReason("Update not supported by feed");
        this.updateRequiresFullRepresentation = new ErrorCode(this, "updateRequiresFullRepresentation").withInternalReason("PUT requires a full resource representation.  Use PATCH to update using a partial representation");
        this.uriValueRequired = new ErrorCode(this, "uriValueRequired").withInternalReason("URI must have a value");
        this.urlBaseValueRequired = new ErrorCode(this, "urlBaseValueRequired").withInternalReason("urlBase element must have a value");
        this.valueOrAverageRequired = new ErrorCode(this, "valueOrAverageRequired").withInternalReason("at least one of g:rating/@value or gd:rating/@average is required");
        this.valueOrXmlRequired = new ErrorCode(this, "valueOrXmlRequired").withInternalReason("exactly one of g:extendedProperty/@value, XML is required");
        this.valueXmlMutuallyExclusive = new ErrorCode(this, "valueXmlMutuallyExclusive").withInternalReason("g:extendedProperty/@value and XML are mutually exclusive");
        this.whenRequired = new ErrorCode(this, "whenRequired").withInternalReason("g:when inside g:originalEvent is required");
        this.whitelistAccessFailed = new ErrorCode(this, "whitelistAccessFailed").withInternalReason("Failed to access whitelist");
        this.workspaceRequired = new ErrorCode(this, "workspaceRequired").withInternalReason("Service must contain at least one workspace");
        this.workspaceTitleRequired = new ErrorCode(this, "workspaceTitleRequired").withInternalReason("Workspace must contain a title");
        this.uploadTooLarge = new ErrorCode(this, "uploadTooLarge").withInternalReason("The requested upload is too large");
    }

    static {
        ERR = new CoreErrorDomain();
    }
}
